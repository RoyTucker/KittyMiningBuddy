/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package kittyminingbuddy.client;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import kittyMiningBuddyLibrary.enums.ConnectStatus;
import kittyMiningBuddyLibrary.interfaces.IMessage;
import kittyMiningBuddyLibrary.messageClasses.CloseConnection;
import kittyMiningBuddyLibrary.messageClasses.Connect;

/**
 *
 * @author Roy
 */
public class KittyMiningBuddyClientGUI extends javax.swing.JFrame {

    private KMBSettings objSettings = null;
    private UserDetails winUserDetails = null;
    private ServerDetails winServerDetails = null;

    /**
     * Creates new form KittyMiningBuddyClientGUI
     */
    public KittyMiningBuddyClientGUI() {
        initComponents();
        this.initialise();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlConnStatus = new kittyMiningBuddyLibrary.ConnStatusPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuConnect = new javax.swing.JMenuItem();
        mnuDisconnect = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuUserDetails = new javax.swing.JMenuItem();
        mnuServerDetails = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kiity's Mining Buddy");

        jMenu1.setText("File");

        mnuConnect.setText("Connect");
        mnuConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectHandler(evt);
            }
        });
        jMenu1.add(mnuConnect);

        mnuDisconnect.setText("Disconnect");
        mnuDisconnect.setEnabled(false);
        mnuDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectHandler(evt);
            }
        });
        jMenu1.add(mnuDisconnect);
        jMenu1.add(jSeparator1);

        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit(evt);
            }
        });
        jMenu1.add(mnuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Settings");

        mnuUserDetails.setText("User Details");
        mnuUserDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userDetailsClick(evt);
            }
        });
        jMenu2.add(mnuUserDetails);

        mnuServerDetails.setText("Server Details");
        mnuServerDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServerDetails_Click(evt);
            }
        });
        jMenu2.add(mnuServerDetails);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlConnStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlConnStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 386, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectHandler
        try {
            // TODO add your handling code here:
            Connect msg = new Connect(this.objSettings.getUserDetails());
            Socket newConn = new Socket(this.objSettings.getInternetAddress(), this.objSettings.getPort());
            this.objSettings.setConnSocket(newConn);
            ObjectOutputStream outStream = this.objSettings.getObjectOutputStream();
            outStream.writeObject(msg);
            outStream.flush();
            this.objSettings.setConnectionStatus(ConnectStatus.CONNECTED);
            JOptionPane.showMessageDialog(null, "Connection Established");
        } catch (IOException ex) {
            Logger.getLogger(KittyMiningBuddyClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_connectHandler

    private void disconnectHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectHandler
        // TODO add your handling code here:
        Socket conn = this.objSettings.getConnSocket();
        if (null != conn && conn.isConnected() && !conn.isClosed()) {
            try {
                IMessage msg = new CloseConnection();
                this.objSettings.getObjectOutputStream().writeObject(msg);
                this.objSettings.closeSocket();
                this.objSettings.setConnectionStatus(ConnectStatus.DISCONNECTED);
                JOptionPane.showMessageDialog(null, "Connection Terminated");
            } catch (IOException ex) {
                Logger.getLogger(KittyMiningBuddyClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_disconnectHandler

    private void exit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit
        // TODO add your handling code here:
        Socket conn = this.objSettings.getConnSocket();
        if(null != conn && conn.isConnected() && !conn.isClosed()){
            try {
                IMessage msg = new CloseConnection();
                this.objSettings.getObjectOutputStream().writeObject(msg);
                this.objSettings.closeSocket();
                this.mnuConnect.setEnabled(true);
                this.mnuDisconnect.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Connection Terminated");
            } catch (IOException ex) {
                Logger.getLogger(KittyMiningBuddyClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_exit

    private void userDetailsClick(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userDetailsClick
        if(null != this.winUserDetails){
            this.winUserDetails.setVisible(true);
        }
    }//GEN-LAST:event_userDetailsClick

    private void btnServerDetails_Click(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServerDetails_Click
        // TODO add your handling code here:
        if(null != this.winServerDetails){
            this.winServerDetails.setVisible(true);
        }
    }//GEN-LAST:event_btnServerDetails_Click

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KittyMiningBuddyClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KittyMiningBuddyClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KittyMiningBuddyClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KittyMiningBuddyClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new KittyMiningBuddyClientGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem mnuConnect;
    private javax.swing.JMenuItem mnuDisconnect;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenuItem mnuServerDetails;
    private javax.swing.JMenuItem mnuUserDetails;
    private kittyMiningBuddyLibrary.ConnStatusPanel pnlConnStatus;
    // End of variables declaration//GEN-END:variables

    private void initialise(){
        this.objSettings = new KMBSettings();
        this.objSettings.addPropertyChangeListener(new ConnectionStatusListener());
        this.winUserDetails = new UserDetails();
        this.winUserDetails.setSettings(this.objSettings);
        this.winServerDetails = new ServerDetails();
        this.winServerDetails.setSettings(this.objSettings);
        this.addWindowListener(new WindowClosingListener());
        this.centreJFrame(this);
        this.centreJFrame(this.winUserDetails);
        this.centreJFrame(this.winServerDetails);
    }
    
    private void centreJFrame(JFrame objToCentre){
        if(null != objToCentre){
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            Double dblExWidth = screenSize.getWidth() - objToCentre.getWidth();
            dblExWidth = dblExWidth / 2.0d;
            Double dblExHeight = screenSize.getHeight() - objToCentre.getHeight();
            dblExHeight = dblExHeight /2.0d;
            objToCentre.setLocation(dblExWidth.intValue(), dblExHeight.intValue());
        }
    }
    
    private class WindowClosingListener extends WindowAdapter{

        @Override
        public void windowClosing(WindowEvent e) {
            if(null != objSettings && objSettings.getConnectionStatus() == ConnectStatus.CONNECTED){
                disconnectHandler(null);
            }
        }
        
    }
    
    private class ConnectionStatusListener implements PropertyChangeListener{

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if(evt.getPropertyName().equalsIgnoreCase("ConnectionStatus")){
                if(null != objSettings){
                    switch(objSettings.getConnectionStatus()){
                        case CONNECTED:
                            mnuConnect.setEnabled(false);
                            mnuDisconnect.setEnabled(true);
                            pnlConnStatus.setConnectionStatus(ConnectStatus.CONNECTED);
                            break;
                        case DISCONNECTED:
                            mnuConnect.setEnabled(true);
                            mnuDisconnect.setEnabled(false);
                            pnlConnStatus.setConnectionStatus(ConnectStatus.DISCONNECTED);
                            break;
                    }
                }
            }
        }
    }
}
